<Project Sdk="Microsoft.Build.NoTargets/3.7.56">

    <Import Project="$(MSBuildThisFileDirectory)FindPythonTask.targets" />
    
    <PropertyGroup>
        <!-- Needs a TargetFramework even though we aren't building any .NET assemblies. -->
        <TargetFramework>net8.0</TargetFramework>
        <SkipCopyBuildProject>false</SkipCopyBuildProject> <!-- We need to copy things! -->

        <NoWarn>$(NoWarn);NU5128</NoWarn> <!-- We have no .NET in this package, but we're forced to declare a TargetFramework. -->
        
        <PackageId>CeresGpuPrebuiltExternalTools</PackageId>
        <PackageProjectUrl>https://github.com/ceresgalax/CeresGpuPrebuiltExternalTools</PackageProjectUrl>
        <Version>1.0</Version>
    </PropertyGroup>
    
    <!-- Properties which can be set by the invoker -->
    <PropertyGroup>
        <SkipNativeBuilds>false</SkipNativeBuilds>
    </PropertyGroup>
    
    <PropertyGroup>
        <ProcessorCount>$([System.Environment]::ProcessorCount)</ProcessorCount>
    </PropertyGroup>
    
    <!-- By defualt, only build the rid that matches the host. -->
    <PropertyGroup Condition="'$(RidsToBuild)' == ''">
        <CurrentOs Condition="$([MSBuild]::IsOSPlatform('Windows'))">win</CurrentOs>
        <CurrentOs Condition="$([MSBuild]::IsOSPlatform('OSX'))">osx</CurrentOs>
        <CurrentArch>$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture.ToString().ToLower())</CurrentArch>
        <RidsToBuild>$(CurrentOs)-$(CurrentArch)</RidsToBuild>
    </PropertyGroup>
    <PropertyGroup>
        <!-- Surround by semicolons so that we can check which rid items can be included below. -->
        <RidsToBuild>;$(RidsToBuild);</RidsToBuild>
    </PropertyGroup>
    
    <ItemGroup>
        <BuildableRid Include="win-x64">
            <BuildOutputDir>$(Configuration)\</BuildOutputDir>
            <ExecutableExtension>.exe</ExecutableExtension>
        </BuildableRid>
        <BuildableRid Include="osx-x64;osx-arm64">
            <BuildOutputDir />
            <ExecutableExtension />
        </BuildableRid>
    </ItemGroup>
    
    <PropertyGroup>
        <DepsDirectory>$(MSBuildThisFileDirectory)..\</DepsDirectory>
        <GlslangSourceDir>$(DepsDirectory)glslang\</GlslangSourceDir>
        <SpirVCrossSourceDir>$(DepsDirectory)SPIRV-Cross\</SpirVCrossSourceDir>
    </PropertyGroup>

    <ItemGroup>
        <GlslangKnownGoodInput Include="$(GlslangSourceDir)*.json"/>
        <GlslangKnownGoodInput Include="$(GlslangSourceDir)update_glslang_sources.py"/>
    </ItemGroup>

    <Target Name="UpdateGlslangExternalSources"
            Inputs="@(GlslangKnownGoodInput)"
            Outputs="$(IntermediateOutputPath)\glslang\update_sources.receipt"
            BeforeTargets="MakeGlslangSingular"
            Condition="!$(SkipNativeBuilds)"
    >
        <FindPythonTask>
            <Output TaskParameter="PythonPath" PropertyName="Python" />
        </FindPythonTask>
        <Exec WorkingDirectory="$(GlslangSourceDir)" Command="$(Python) update_glslang_sources.py" />

        <MakeDir Directories="$(IntermediateOutputPath)\glslang" />
        <Touch Files="$(IntermediateOutputPath)\glslang\update_source.receipt" AlwaysCreate="true"/>

        <ItemGroup>
            <!-- Now that we have all the sources files in place, we can determine the source file items. -->
            <GlslangSrcFile Include="$(GlslangSourceDir)**\*" />
        </ItemGroup>
    </Target>
    
    <ItemGroup>
        <GlslangBinary Include="glslangValidator" Visible="False"/>
        <!-- Additional binaries to package can be listed here -->
    </ItemGroup>
    
    <Target Name="_ComputeGlslangOutputFiles" BeforeTargets="MakeGlslangSingular" Condition="!$(SkipNativeBuilds)">
        <ItemGroup>
            <!-- This needs to be done inside of a task, so that the task can run for each element of the factor item. -->
            <!-- MSBuild quirk.. In order to do a cartesian product of GlslangBinary x BuildableRid, each metadata must only contain the factor item. Obvious, right? :) -->
            <GlslangOutputFileCombined Include="@(GlslangBinary)">
                <ExecutableExtension>%(BuildableRid.ExecutableExtension)</ExecutableExtension>
                <Rid>%(BuildableRid.Identity)</Rid>
                <OutputConfigurationDir>%(BuildableRid.BuildOutputDir)</OutputConfigurationDir>
            </GlslangOutputFileCombined>
        </ItemGroup>
        
        <ItemGroup>
            <GlslangOutputFile Include="@(GlslangOutputFileCombined)" Condition="$(RidsToBuild.Contains(';%(Rid);'))">
                <FilenameToCopy>%(Identity)%(ExecutableExtension)</FilenameToCopy>
                <TaskOutput>$(MSBuildThisFileDirectory)runtimes\%(Rid)\native\%(GlslangOutputFile.FilenameToCopy)</TaskOutput>
                <InternalOutputDir>StandAlone\%(OutputConfigurationDir)</InternalOutputDir>
            </GlslangOutputFile>
        </ItemGroup>
    </Target>
    
    <Target Name="MakeGlslangSingular"
            Inputs="@(GlslangSrcFile)"
            Outputs="@(GlslangOutputFile -> '%(TaskOutput)')"
            Condition="!$(SkipNativeBuilds)"
    >
        <PropertyGroup>
            <ThisRid>%(GlslangOutputFile.Rid)</ThisRid>
            <BuildDir>$(IntermediateOutputPath)glslang\</BuildDir>
            <BuildOutputDir>$(BuildDir)%(GlslangOutputFile.InternalOutputDir)</BuildOutputDir>
        </PropertyGroup>
        
        <PropertyGroup>
            <CmakeOsxArchitectures />
            <CmakeOsxArchitectures Condition="'%(GlslangOutputFile.Rid)' == 'osx-x64'">x86_64</CmakeOsxArchitectures>
            <CmakeOsxArchitectures Condition="'%(GlslangOutputFile.Rid)' == 'osx-arm64'">arm64</CmakeOsxArchitectures>
        </PropertyGroup>

        <MakeDir Directories="$(BuildDir)" />
        <Exec WorkingDirectory="$(BuildDir)" Command="cmake &quot;$(GlslangSourceDir.TrimEnd('\'))&quot; &quot;-DCMAKE_OSX_ARCHITECTURES=$(CmakeOsxArchitectures)&quot;" />
        <!-- Don't use bare -j flag here. Their cmake file somehow causes too many processes to be spawned if a number is not also supplied. -->
        <Exec WorkingDirectory="$(BuildDir)" Command="cmake --build . --config $(Configuration) -j$(ProcessorCount)" />

        <MakeDir Directories="runtimes\$(ThisRid)\native\" />
        <Copy
            SourceFiles="@(GlslangOutputFile -> '$(BuildOutputDir)%(FilenameToCopy)')"
            DestinationFiles="%(GlslangOutputFile.TaskOutput)"
        />

        <ItemGroup>
            <FileWrites Include="$(BuildDir)\**\*" />
            <FileWrites Include="%(GlslangOutputFile.TaskOutput)" />
        </ItemGroup>
    </Target>

    <ItemGroup>
        <SpirVCrossSrc Include="$(GlslangSourceDir)*.json"/>

        <SpirVCrossBinary Include="spirv-cross" Visible="False"/>
        <!-- Additional binaries to package can be listed here -->
    </ItemGroup>

    <Target Name="_ComputeSpirVCrossOutputFiles" BeforeTargets="MakeSpirVCrossSingular" Condition="!$(SkipNativeBuilds)">
        <ItemGroup>
            <!-- This needs to be done inside of a task, so that the task can run for each element of the factor item. -->
            <!-- MSBuild quirk.. In order to do a cartesian product of GlslangBinary x BuildableRid, each metadata must only contain the factor item. Obvious, right? :) -->
            <SpirVCrossOutputFileCombined Include="@(SpirVCrossBinary)">
                <ExecutableExtension>%(BuildableRid.ExecutableExtension)</ExecutableExtension>
                <Rid>%(BuildableRid.Identity)</Rid>
                <OutputConfigurationDir>%(BuildableRid.BuildOutputDir)</OutputConfigurationDir>
            </SpirVCrossOutputFileCombined>
        </ItemGroup>

        <ItemGroup>
            <SpirVCrossOutputFile Include="@(SpirVCrossOutputFileCombined)" Condition="$(RidsToBuild.Contains(';%(Rid);'))">
                <FilenameToCopy>%(Identity)%(ExecutableExtension)</FilenameToCopy>
                <TaskOutput>$(MSBuildThisFileDirectory)runtimes\%(Rid)\native\%(SpirVCrossOutputFile.FilenameToCopy)</TaskOutput>
                <InternalOutputDir>%(OutputConfigurationDir)</InternalOutputDir>
            </SpirVCrossOutputFile>
        </ItemGroup>
    </Target>

    <Target Name="MakeSpirVCrossSingular"
            Inputs="@(SpirVCrossSrc)"
            Outputs="@(SpirVCrossOutputFile -> '%(TaskOutput)')"
            Condition="!$(SkipNativeBuilds)"
    >
        <PropertyGroup>
            <ThisRid>%(SpirVCrossOutputFile.Rid)</ThisRid>
            <BuildDir>$(IntermediateOutputPath)SPIRV-Cross\</BuildDir>
            <BuildOutputDir>$(BuildDir)%(SpirVCrossOutputFile.InternalOutputDir)</BuildOutputDir>
        </PropertyGroup>

        <PropertyGroup>
            <CmakeOsxArchitectures />
            <CmakeOsxArchitectures Condition="'%(BuildableRid.Identity)' == 'osx-x64'">x86_64</CmakeOsxArchitectures>
            <CmakeOsxArchitectures Condition="'%(BuildableRid.Identity)' == 'osx-arm64'">arm64</CmakeOsxArchitectures>
        </PropertyGroup>

        <MakeDir Directories="$(BuildDir)" />
        <Exec WorkingDirectory="$(BuildDir)" Command="cmake &quot;$(SpirVCrossSourceDir.TrimEnd('\'))&quot; &quot;-DCMAKE_OSX_ARCHITECTURES=$(CmakeOsxArchitectures)&quot;" />
        <!-- Don't use bare -j flag here. Their cmake file somehow causes too many processes to be spawned if a number is not also supplied. -->
        <Exec WorkingDirectory="$(BuildDir)" Command="cmake --build . --config $(Configuration) -j$(ProcessorCount)" />

        <MakeDir Directories="runtimes\$(ThisRid)\native\" />
        <Copy
            SourceFiles="@(SpirVCrossOutputFile -> '$(BuildOutputDir)%(FilenameToCopy)')"
            DestinationFiles="%(SpirVCrossOutputFile.TaskOutput)"
        />
        
        <ItemGroup>
            <FileWrites Include="$(BuildDir)\**\*" />
            <FileWrites Include="%(SpirVCrossOutputFile.TaskOutput)" />
        </ItemGroup>
    </Target>

    <Target Name="MakeGgenTools" BeforeTargets="BeforeBuild;DispatchToInnerBuilds" Condition="!$(SkipNativeBuilds)">
        <!--TargetFramework=once is critical here, as msbuild will not execute a task from same project with same properties twice. -->
        <MSBuild Projects="$(MSBuildProjectFile)" Targets="MakeGlslangSingular" Properties="TargetFramework=once" />
        <MSBuild Projects="$(MSBuildProjectFile)" Targets="MakeSpirVCrossSingular" Properties="TargetFramework=once" />
    </Target>
    
    <ItemGroup>
        <None Include="runtimes\**\*">
            <PackagePath>%(Identity)</PackagePath>
            <Pack>true</Pack>
        </None>
    </ItemGroup>
    
</Project>
